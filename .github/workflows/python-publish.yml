name: Python Package

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pyproject.toml'  # Trigger on version changes
  pull_request:
    branches: [ main ]
  # Keep release trigger as backup for manual releases
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-uv-
          ${{ runner.os }}-python-

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Lint with ruff
      run: |
        uv run ruff check .

    - name: Run tests
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run security checks
      run: |
        uv run ruff check --select S .

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    # Trigger on version changes in main branch or manual releases
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv sync --all-extras --dev

    - name: Build package
      run: |
        uv run python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep -E "^version\s*=\s*\"[0-9\.]+\"" pyproject.toml | cut -d '"' -f 2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Create Git tag
      if: github.event_name == 'push'  # Only create tags for version changes, not manual releases
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
        git push origin --tags

    - name: Create GitHub Release
      if: github.event_name == 'push'  # Only create releases for version changes, not manual releases
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.get_version.outputs.version }}"
        name: "Release v${{ steps.get_version.outputs.version }}"
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-package:
    needs: build
    runs-on: ubuntu-latest
    # Test package for both automatic releases (version changes) and manual releases
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
    - name: Checkout code (to get version)
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep -E "^version\s*=\s*\"[0-9\.]+\"" pyproject.toml | cut -d '"' -f 2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Testing version: $VERSION"

    - name: Wait for PyPI availability
      run: |
        echo "Waiting 60 seconds for package to be available on PyPI..."
        sleep 60

    - name: Install published package
      run: |
        python -m pip install --upgrade pip
        # For manual releases, use the release tag; for automatic releases, use extracted version
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ steps.get_version.outputs.version }}"
        fi
        echo "Installing ticktick-mcp-v2==$VERSION"
        python -m pip install ticktick-mcp-v2==$VERSION

    - name: Test installed package
      run: |
        python -c "import ticktick_mcp_v2; print('Package imported successfully')"
        python -c "from ticktick_mcp_v2 import TickTickMCPServer; print('Server class imported successfully')"
